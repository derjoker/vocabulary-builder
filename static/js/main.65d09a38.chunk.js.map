{"version":3,"sources":["components/Books.jsx","components/Lookups.jsx","containers/Book.jsx","containers/Kindle.jsx","App.js","serviceWorker.js","index.js"],"names":["Books","_this$props","this","props","books","clickTableRow","react_default","a","createElement","Table_default","TableHead_default","TableRow_default","TableCell_default","TableBody_default","map","book","key","_id","onClick","title","authors","lang","Component","defaultProps","bookKey","console","log","Lookups","lookups","lookup","usage","Transition","Slide_default","Object","assign","direction","Book","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","client","Stitch","defaultAppClient","classes","close","Dialog_default","open","fullScreen","onClose","TransitionComponent","AppBar_default","className","appBar","Toolbar_default","Typography_default","variant","color","flex","IconButton_default","aria-label","Close_default","components_Lookups","withStyles","position","Kindle","state","closeBookDialog","bind","assertThisInitialized","setState","_this2","callFunction","then","_this3","_this$state","containers_Book","components_Books","find","process","initializeDefaultAppClient","credential","UserPasswordCredential","auth","loginWithCredential","error","App","Kindle_Kindle","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.65d09a38.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport Table from '@material-ui/core/Table'\nimport TableHead from '@material-ui/core/TableHead'\nimport TableBody from '@material-ui/core/TableBody'\nimport TableRow from '@material-ui/core/TableRow'\nimport TableCell from '@material-ui/core/TableCell'\n\nclass Books extends Component {\n  render () {\n    const { books, clickTableRow } = this.props\n    return (\n      <Table>\n        <TableHead>\n          <TableRow>\n            <TableCell>Title</TableCell>\n            <TableCell>Authors</TableCell>\n            <TableCell>Lang</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {books.map(book => (\n            <TableRow\n              key={book._id}\n              onClick={() => {\n                clickTableRow(book._id)\n              }}\n            >\n              <TableCell>{book.title}</TableCell>\n              <TableCell>{book.authors}</TableCell>\n              <TableCell>{book.lang}</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    )\n  }\n}\n\nBooks.propTypes = {\n  books: PropTypes.array.isRequired,\n  clickTableRow: PropTypes.func\n}\n\nBooks.defaultProps = {\n  books: [],\n  clickTableRow: bookKey => {\n    console.log(bookKey)\n  }\n}\n\nexport default Books\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport Table from '@material-ui/core/Table'\nimport TableBody from '@material-ui/core/TableBody'\nimport TableRow from '@material-ui/core/TableRow'\nimport TableCell from '@material-ui/core/TableCell'\n\nclass Lookups extends Component {\n  render () {\n    const { lookups } = this.props\n    return (\n      <Table>\n        <TableBody>\n          {lookups.map(lookup => (\n            <TableRow key={lookup._id}>\n              <TableCell>{lookup.usage}</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    )\n  }\n}\n\nLookups.propTypes = {\n  lookups: PropTypes.array.isRequired\n}\n\nLookups.defaultProps = {\n  lookups: []\n}\n\nexport default Lookups\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { withStyles } from '@material-ui/core/styles'\nimport Dialog from '@material-ui/core/Dialog'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport IconButton from '@material-ui/core/IconButton'\nimport Typography from '@material-ui/core/Typography'\nimport Slide from '@material-ui/core/Slide'\nimport CloseIcon from '@material-ui/icons/Close'\nimport { Stitch } from 'mongodb-stitch-browser-sdk'\n\nimport Lookups from '../components/Lookups'\n\nconst styles = {\n  appBar: {\n    position: 'sticky'\n  },\n  flex: {\n    flex: 1\n  }\n}\n\nfunction Transition (props) {\n  return <Slide direction='up' {...props} />\n}\n\nclass Book extends Component {\n  constructor (props) {\n    super(props)\n    this.client = Stitch.defaultAppClient\n  }\n\n  render () {\n    const { classes, book, close } = this.props\n    return (\n      <Dialog open fullScreen onClose={close} TransitionComponent={Transition}>\n        <AppBar className={classes.appBar}>\n          <Toolbar>\n            <Typography\n              variant='title'\n              color='inherit'\n              className={classes.flex}\n            >\n              {book.title}\n            </Typography>\n            <IconButton color='inherit' onClick={close} aria-label='Close'>\n              <CloseIcon />\n            </IconButton>\n          </Toolbar>\n        </AppBar>\n        <Lookups lookups={book.lookups} />\n      </Dialog>\n    )\n  }\n}\n\nBook.propTypes = {\n  classes: PropTypes.object.isRequired,\n  book: PropTypes.object\n}\n\nexport default withStyles(styles)(Book)\n","import React, { Component } from 'react'\nimport { Stitch } from 'mongodb-stitch-browser-sdk'\n\nimport Books from '../components/Books'\nimport Book from './Book'\n\nexport default class Kindle extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      title: '',\n      books: [],\n      book: null\n    }\n    this.client = Stitch.defaultAppClient\n    this.closeBookDialog = this.closeBookDialog.bind(this)\n  }\n\n  closeBookDialog () {\n    this.setState({ book: null })\n  }\n\n  componentWillMount () {\n    this.client.callFunction('getBooks').then(books => {\n      this.setState({ books })\n    })\n  }\n\n  render () {\n    const { books, book } = this.state\n    return (\n      <div>\n        {book && <Book book={book} close={this.closeBookDialog} />}\n        <Books\n          books={books}\n          clickTableRow={bookKey => {\n            const book = books.find(book => book._id === bookKey)\n            this.setState({ book })\n          }}\n        />\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport { Stitch, UserPasswordCredential } from 'mongodb-stitch-browser-sdk'\n\nimport Kindle from './containers/Kindle'\n\ntry {\n  console.log(process.env)\n  const client = Stitch.initializeDefaultAppClient(\n    process.env.REACT_APP_STITCH_APP_KEY\n  )\n  const credential = new UserPasswordCredential(\n    process.env.REACT_APP_TEST_EMAIL,\n    process.env.REACT_APP_TEST_PASSWORD\n  )\n  client.auth.loginWithCredential(credential)\n} catch (error) {\n  // ignore: default app can only be set once\n  console.log(error)\n}\n\nclass App extends Component {\n  render () {\n    return (\n      <div>\n        <Kindle />\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}