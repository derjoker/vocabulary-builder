{"version":3,"sources":["components/Books.jsx","components/Stem.jsx","components/Lookups.jsx","containers/Book.jsx","containers/Kindle.jsx","App.js","serviceWorker.js","index.js"],"names":["Books","_this$props","this","props","books","clickTableRow","react_default","a","createElement","Table_default","TableHead_default","TableRow_default","TableCell_default","TableBody_default","map","book","key","_id","onClick","title","authors","lang","Component","defaultProps","bookKey","console","log","Stem","lookup","Chip_default","label","stem","variant","onDelete","deleteIcon","Edit_default","Lookups","lookups","Typography_default","usage","components_Stem","Transition","Slide_default","Object","assign","direction","Book","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","client","Stitch","defaultAppClient","classes","close","Dialog_default","open","fullScreen","onClose","TransitionComponent","AppBar_default","className","appBar","Toolbar_default","color","flex","IconButton_default","aria-label","Close_default","components_Lookups","withStyles","position","Kindle","state","closeBookDialog","bind","assertThisInitialized","setState","_this2","callFunction","then","_this3","_this$state","containers_Book","components_Books","bookId","initializeDefaultAppClient","process","credential","UserPasswordCredential","auth","loginWithCredential","error","App","Kindle_Kindle","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0fc13608.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport Table from '@material-ui/core/Table'\nimport TableHead from '@material-ui/core/TableHead'\nimport TableBody from '@material-ui/core/TableBody'\nimport TableRow from '@material-ui/core/TableRow'\nimport TableCell from '@material-ui/core/TableCell'\n\nclass Books extends Component {\n  render () {\n    const { books, clickTableRow } = this.props\n    return (\n      <Table>\n        <TableHead>\n          <TableRow>\n            <TableCell>Title</TableCell>\n            <TableCell>Authors</TableCell>\n            <TableCell>Lang</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {books.map(book => (\n            <TableRow\n              key={book._id}\n              onClick={() => {\n                clickTableRow(book._id)\n              }}\n            >\n              <TableCell>{book.title}</TableCell>\n              <TableCell>{book.authors}</TableCell>\n              <TableCell>{book.lang}</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    )\n  }\n}\n\nBooks.propTypes = {\n  books: PropTypes.array.isRequired,\n  clickTableRow: PropTypes.func\n}\n\nBooks.defaultProps = {\n  books: [],\n  clickTableRow: bookKey => {\n    console.log(bookKey)\n  }\n}\n\nexport default Books\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport Chip from '@material-ui/core/Chip'\nimport EditIcon from '@material-ui/icons/Edit'\n\nclass Stem extends Component {\n  render () {\n    const { lookup } = this.props\n    return (\n      <Chip\n        key={lookup._id}\n        label={lookup.stem}\n        variant='outlined'\n        onDelete={() => {\n          console.log(lookup)\n        }}\n        deleteIcon={<EditIcon />}\n      />\n    )\n  }\n}\n\nStem.propTypes = {\n  lookup: PropTypes.object.isRequired\n}\n\nexport default Stem\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport Table from '@material-ui/core/Table'\nimport TableBody from '@material-ui/core/TableBody'\nimport TableRow from '@material-ui/core/TableRow'\nimport TableCell from '@material-ui/core/TableCell'\nimport Typography from '@material-ui/core/Typography'\n\nimport Stem from './Stem'\n\nclass Lookups extends Component {\n  render () {\n    const { lookups } = this.props\n    return (\n      <Table>\n        <TableBody>\n          {lookups.map(lookup => (\n            <TableRow key={lookup._id}>\n              <TableCell>\n                <Typography>{lookup.usage}</Typography>\n                <Stem lookup={lookup} />\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    )\n  }\n}\n\nLookups.propTypes = {\n  lookups: PropTypes.array.isRequired\n}\n\nLookups.defaultProps = {\n  lookups: []\n}\n\nexport default Lookups\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { withStyles } from '@material-ui/core/styles'\nimport Dialog from '@material-ui/core/Dialog'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport IconButton from '@material-ui/core/IconButton'\nimport Typography from '@material-ui/core/Typography'\nimport Slide from '@material-ui/core/Slide'\nimport CloseIcon from '@material-ui/icons/Close'\nimport { Stitch } from 'mongodb-stitch-browser-sdk'\n\nimport Lookups from '../components/Lookups'\n\nconst styles = {\n  appBar: {\n    position: 'sticky'\n  },\n  flex: {\n    flex: 1\n  }\n}\n\nfunction Transition (props) {\n  return <Slide direction='up' {...props} />\n}\n\nclass Book extends Component {\n  constructor (props) {\n    super(props)\n    this.client = Stitch.defaultAppClient\n  }\n\n  render () {\n    const { classes, book, close } = this.props\n    return (\n      <Dialog open fullScreen onClose={close} TransitionComponent={Transition}>\n        <AppBar className={classes.appBar}>\n          <Toolbar>\n            <Typography\n              variant='title'\n              color='inherit'\n              className={classes.flex}\n            >\n              {book.title}\n            </Typography>\n            <IconButton color='inherit' onClick={close} aria-label='Close'>\n              <CloseIcon />\n            </IconButton>\n          </Toolbar>\n        </AppBar>\n        <Lookups lookups={book.lookups} />\n      </Dialog>\n    )\n  }\n}\n\nBook.propTypes = {\n  classes: PropTypes.object.isRequired,\n  book: PropTypes.object\n}\n\nexport default withStyles(styles)(Book)\n","import React, { Component } from 'react'\nimport { Stitch } from 'mongodb-stitch-browser-sdk'\n\nimport Books from '../components/Books'\nimport Book from './Book'\n\nexport default class Kindle extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      title: '',\n      books: [],\n      book: null\n    }\n    this.client = Stitch.defaultAppClient\n    this.closeBookDialog = this.closeBookDialog.bind(this)\n  }\n\n  closeBookDialog () {\n    this.setState({ book: null })\n  }\n\n  componentWillMount () {\n    this.client.callFunction('getBooks').then(books => {\n      this.setState({ books })\n    })\n  }\n\n  render () {\n    const { books, book } = this.state\n    return (\n      <div>\n        {book && <Book book={book} close={this.closeBookDialog} />}\n        <Books\n          books={books}\n          clickTableRow={bookId => {\n            this.client.callFunction('getBook', [bookId]).then(book => {\n              this.setState({ book })\n            })\n          }}\n        />\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport { Stitch, UserPasswordCredential } from 'mongodb-stitch-browser-sdk'\n\nimport Kindle from './containers/Kindle'\n\ntry {\n  const client = Stitch.initializeDefaultAppClient(\n    process.env.REACT_APP_STITCH_APP_KEY\n  )\n  const credential = new UserPasswordCredential(\n    process.env.REACT_APP_TEST_EMAIL,\n    process.env.REACT_APP_TEST_PASSWORD\n  )\n  client.auth.loginWithCredential(credential)\n} catch (error) {\n  // ignore: default app can only be set once\n  console.log(error)\n}\n\nclass App extends Component {\n  render () {\n    return (\n      <div>\n        <Kindle />\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}